from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
import requests

from dotenv import load_dotenv
import os

load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")

# üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å CoinGecko
def get_price(symbol: str):
    try:
        url = f"https://api.coingecko.com/api/v3/simple/price?ids={symbol.lower()}&vs_currencies=usd"
        response = requests.get(url, timeout=5)
        data = response.json()
        return data[symbol.lower()]["usd"]
    except:
        return "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"

# üöÄ –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[
        InlineKeyboardButton("–¶–µ–Ω–∞ BTC", callback_data='price bitcoin'),
        InlineKeyboardButton("–¶–µ–Ω–∞ ETH", callback_data='price ethereum'),
        InlineKeyboardButton("–¶–µ–Ω–∞ SOL", callback_data='price solana'),
        InlineKeyboardButton("–¶–µ–Ω–∞ DOGE", callback_data='price dogecoin')
    ]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ö–æ–ø–µ—Ä–Ω–∏–∫ –ü—Ä–∞–π–º ü§ñ\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/price BTCUSDT ‚Äî —É–∑–Ω–∞—Ç—å —Ü–µ–Ω—É\n"
        "/rsi BTCUSDT ‚Äî RSI (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)\n\n"
        "–í—ã–±–µ—Ä–∏ –º–æ–Ω–µ—Ç—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É:\n"
        "/price BTCUSDT"
    )

    await update.message.reply_text(message, reply_markup=reply_markup)

# üì© –ö–æ–º–∞–Ω–¥–∞ /price
async def price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        pair = context.args[0].upper()
        if pair == "BTCUSDT":
            symbol = "bitcoin"
        elif pair == "ETHUSDT":
            symbol = "ethereum"
        elif pair == "SOLUSDT":
            symbol = "solana"
        elif pair == "DOGEUSDT":
            symbol = "dogecoin"
        else:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–∞—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π BTCUSDT, ETHUSDT, SOLUSDT, DOGEUSDT.")
            return

        price = get_price(symbol)
        await update.message.reply_text(f"üí∏ –¶–µ–Ω–∞ {pair}: ${price}")
    except Exception as e:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã.")

# üîò –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    symbol_map = {
        "price bitcoin": "bitcoin",
        "price ethereum": "ethereum",
        "price solana": "solana",
        "price dogecoin": "dogecoin"
    }

    if data in symbol_map:
        symbol = symbol_map[data]
        price = get_price(symbol)
        await query.edit_message_text(text=f"üí∏ –¶–µ–Ω–∞ {symbol.upper()}/USDT: ${price}")
    else:
        await query.edit_message_text(text="–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.")

# üß† –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    app = ApplicationBuilder().token(API_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("price", price))
    app.add_handler(CallbackQueryHandler(button_handler))
    print("üöÄ –ö–æ–ø–µ—Ä–Ω–∏–∫ –ü—Ä–∞–π–º –∑–∞–ø—É—â–µ–Ω. –ñ–¥—É –∫–æ–º–∞–Ω–¥—ã –≤ Telegram...")
    app.run_polling()
